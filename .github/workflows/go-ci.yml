name: Go CI

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Build & Test
    runs-on: windows-latest # Указан Windows runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.6

      - name: Perform Go Mod Tidy for all modules
        # Запускаем go mod tidy для каждого модуля, чтобы разрешить зависимости
        # forward slashes используются для paths даже на Windows
        run: |
          go mod tidy -C ./goldentest
          go mod tidy -C ./translator
          go mod tidy -C ./machine
          go mod tidy -C ./isa

      - name: Set up Go workspace (go.work)
        # Запускаем go work sync из корневой директории, где находится go.work
        # working-directory не нужен, если команда выполняется из корня репозитория
        run: go work sync

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            # В Windows пути кэша могут быть другими, но actions/cache обычно их корректно определяет.
            # Если возникнут проблемы, можно попробовать %USERPROFILE%\go\pkg\mod и %USERPROFILE%\.cache\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Format check (gofmt & goimports)
        # Устанавливаем goimports глобально для использования в следующем шаге.
        # Команда 'if ! ... ; then ...' является синтаксисом bash/sh,
        # который работает на Windows runner, т.к. GitHub Actions по умолчанию использует PowerShell/Bash.
        # Однако, для PowerShell более идиоматично использовать `if (-not (...)) { ... }`.
        # Придерживаемся кросс-платформенного синтаксиса bash, который будет работать.
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          if ! goimports -l .; then
            echo "::error file=.::Go files not formatted with goimports or imports are unorganized. Please run 'goimports -w .' on your local machine."
            exit 1
          fi

      - name: Run linter (golangci-lint)
        uses: golangci/golangci-lint-action@v6
        with:
          # working-directory: ./ - не указываем, так как по умолчанию уже корень репозитория
          # args: --config=./.golangci.yml ./... - эта конфигурация должна работать,
          # так как .golangci.yml находится в корне, и `./...` указывает на все пакеты в текущем воркспейсе.
          # Если возникают проблемы, раскомментируйте более явную версию ниже.
          version: v1.59.0
          args: --config=./.golangci.yml ./...

      # - name: Run linter (golangci-lint) - Alternative explicit args
      #   # Если предыдущий шаг с `./...` не сработает, попробуйте эту явную версию.
      #   #working-directory: ./ # Оставил для ясности, но по умолчанию это корень репо.
      #   uses: golangci/golangci-lint-action@v6
      #   with:
      #     version: v1.59.0
      #     args: ./isa/... ./translator/... ./machine/... ./goldentest/...

      - name: Run tests in goldentest module
        working-directory: ./goldentest # Указываем путь к модулю goldentest
        run: go test -v